/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>
using namespace std;

void maxSumOfNonAdjacentElements(int arr [],int i,int ans,int n, int &maxi)
{
    if(i>n-1)
    {
        maxi=max(ans,maxi);

        return ;
    }
   
   //ans = ans+arr[i] is incooret
   
// In the given code, the ans+arr[i] parameter is particularly useful because it allows the 
//  function to explore the inclusion of the current element (arr[i]) without actually 
  //modifying the ans variable. This way, if a certain combination of elements does not provide a larger sum,
  //ans has not been permanently modified, and the function can continue 
  //exploring other combinations with the original ans value intact.

  // here include first
  maxSumOfNonAdjacentElements(arr,i+2,ans+arr[i], n ,maxi);

  // here exclude it
  maxSumOfNonAdjacentElements(arr,i+1, ans ,  n ,maxi);

// You can certainly use sunsequenceAllWithoutOrder(s, ans+s[i], i+1); as an alternative, and it should work correctly. 
// It's another way to temporarily include s[i] in the subsequence for the recursive call without modifying the original ans
// for the subsequent calls and backtrackings.
// Using ans + s[i] in the function call is a concise way to explore the "include" case without permanently modifying the ans. 
// It creates a new temporary string that includes s[i] and passes it to the recursive call. After that recursive call is finished,
// the original ans (without s[i]) is still available for other operations or recursive calls.  
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
  
    for(int i=0;i<n;++i)cin>>arr[i];
    int maxi=INT_MIN;
    
    maxSumOfNonAdjacentElements(arr,0,0,n,maxi);
    cout<<"\n"<<maxi;
}
