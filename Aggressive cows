
EXPLANATION : it is very similar to book and painter problem that deals with searcg space and adjusting the data for result..here we sort it for having min and max and also an order to maintain a correct distance check as it would now been in a increasing order tat helps to position the cows


CODE:
//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
public:


    bool possible(vector<int>&stalls,int k, int mid)
    {
        int c=1;
        int pos=stalls[0];
        for(int i=0;i<stalls.size();++i)
        {
            if(stalls[i]-pos>=mid)
            {   
                c++;
                pos=stalls[i];
            }
       
           if(c==k)return true;
         } 
           
           
         return false;   
    }
   
// here allso we have a search space..while in book alocation we took sum..here it was distance ...that is the max...ie difference b/w max and min
    int solve(int n, int k, vector<int> &stalls) {
     // we sorted it to get min and max and also the sequence o fit maintaing the distance constraint
        sort(stalls.begin() , stalls.end());
        int start=0;
        int end=stalls[stalls.size()-1]-stalls[0];
        int mid=0;
        int ans=-1;
        
        while(start<=end)
        {
            mid=start+(end-start)/2;
            //in book allocation it was end==m-1 in case of true as we were finding the least possible distance
            if((possible(stalls, k, mid)))
            {
                ans=mid;
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t = 1;
    cin >> t;

    // freopen ("output_gfg.txt", "w", stdout);

    while (t--) {
        // Input

        int n, k;
        cin >> n >> k;

        vector<int> stalls(n);
        for (int i = 0; i < n; i++) {
            cin >> stalls[i];
        }
        // char ch;
        // cin >> ch;

        Solution obj;
        cout << obj.solve(n, k, stalls) << endl;

        // cout << "~\n";
    }
    // fclose(stdout);

    return 0;
}
// } Driver Code Ends
