QSN:https://leetcode.com/problems/find-the-duplicate-number/description/

SOLN:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
         int n=nums.size();
         int a[n];
         memset(a, 0, (n)* sizeof(int));
         int ans=0;
  
        for(int i=0;i<n;++i)a[(nums[i]-1)]++;
           
        for(int i=0;i<n;++i)if(a[i]>=2)ans=i+1;
               
        return ans;
  

     // method 2 is based in fact that we modify the given array such that at 0 we move element to its respective place eg if 2 is at zero it is moved to index 2 and the number at index 2 comes at index 0 then it is swapped again with the with the number in the position of the respective number..this cycle goes on till we find that for a certain number swappimg results the same so end and return
        while(nums[0] !=nums[nums[0]])
        {
            swap(nums[0],nums[nums[0]])
        }
        return[nums[0]]
    }
}
};
