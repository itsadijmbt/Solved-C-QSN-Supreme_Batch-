SOLN : the painters problem is also based on creating a time sum space or a search space and then we find time values which suit the best wrt to k keeping in mind the contigiuous rule\\
Explanation : the soln is based on considering the total sum of pages as part of search space..the algo works on the fact to find the least time for for k painters, we have a bs logic that explores the search space and sends it to a function
and the function function checks whther the particular ans is suitable as per elements and constraints...the function checks whether it ispossible for elements to form this combinational sum and if not return false.
In function if we check that if the time constraint is suitable  for this no of k painters  which is checked by c as soon  as c gets > k we break it and return false; also we retuen false when a certain value is > than the selected time value..

DRY RUN EXPLANATION:
https://ibb.co/VCQnxXG
https://ibb.co/j4DkxRT





//{ Driver Code Starts
// driver code

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

class Solution
{
    
    long long timeRanger(int arr[], int n, int k, long long time)
    {
        long long minTime=0;
        long long c=1;//counter for k
        
        for(long long i=0;i<n;++i)
        {
            if(arr[i]>time)
            {
                return false;
            }

            // IMPORTANT mintime+arr[i] is responsible for pre added checkimg to ensure corecting pairing and colection.
            else if(minTime+arr[i]>time)//the additioin is done in if only cause after additoin the value might increase 
            {
                c++;
                minTime=arr[i];
               
                if(c>k)return false;
            }
            else 
            {
                minTime=minTime+arr[i];
            }
        }
    
        return true;
    }
    
    
  public:
    long long minTime(int arr[], int n, int k)
    {
        long long s=0;
        long long e=0;
       
        for(int i=0;i<n;++i) e=e+arr[i];
        
        long long mid=s+(e-s)/2;
        long long ans=-1;
        while(s<=e)
        {
            mid=s+(e-s)/2;
            if((timeRanger(arr, n , k , mid)))
            {
                ans=mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int k,n;
		cin>>k>>n;
		
		int arr[n];
		for(int i=0;i<n;i++)
		    cin>>arr[i];
		Solution obj;
		cout << obj.minTime(arr, n, k) << endl;
	}
	return 0;
}
// } Driver Code Ends
