QSN : binary seach in a nearly sorted array

Hint : as it will be present in i , i+1 , i-1 so now we check them, seperately and after checking its presence before in these indexes now we have to move start and end and adjust mid
now we do m+2 for start and m-2 for end because +-2 because we have already checked the i-1 index so we want to place it at i-2;

SOLN:
#include <iostream>

using namespace std;

int binary_search_nearly_sorted(int arr[] , int size ,int target)
{
    int s=0;
    int e=size-1;
    int m=s+(e-s)/2;
    
    while(s<=e)
    {
        m=s+(e-s)/2;
        
        if(arr[m]==target) {return m;}
        else if( arr[m-1]==target && m-1>=0){return m-1;}
        else if( arr[m+1]==target && m+1<=size-1){return m+1;}
        
        if(arr[m]<target) {s=m+2;}
        else if(arr[m]>target) {e=m-2;}
    }
    return -1;
}


int main()
{
    int arr[7]={  3, 10, 40 ,  20 , 70 , 50 , 80};
    
    int target=0;
    
    
    for(int i =0;i<7;++i){
        cin>>target;
    int ans = binary_search_nearly_sorted(arr , 7, target);
    cout<<"The index is \t"<<ans<<" ";
        
    }    
    

    return 0;
}
